start 


  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (610ms)

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2031ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2094ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2047ms)
    √ call proc that returns length of input string and decribes itself in results (62ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4022ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (63ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1156ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (594ms)
    √ bulk insert/select null column of datetime batchSize 1 (188ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (615ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (266ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (312ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (219ms)
    √ bulk insert/select bit column batchSize 1 (265ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (282ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (296ms)
    √ bulk insert/select varchar column batchSize 200 (204ms)
    √ bulk insert/select/delete varchar column batchSize 200 (734ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (594ms)


  190 passing (34s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4047ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (63ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (47ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1610ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (625ms)
    √ bulk insert/select null column of datetime batchSize 1 (1000ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (672ms)
    √ employee complex json object array bulk operations (625ms)
    √ employee insert/select with non primary key (296ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (282ms)
    √ bulk insert/select int column of signed batchSize 200 (171ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (313ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (109ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2034ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (46ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (46ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1093ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (532ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (282ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (230ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (262ms)
    √ bulk insert/update/select varchar column batchSize 200 (244ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (284ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2000ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1073ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (532ms)
    √ bulk insert/select null column of datetime batchSize 1 (653ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (249ms)
    √ employee insert - update a single column (251ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (204ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (766ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (750ms)
    √ bulk insert/select decimal column batchSize 200 (191ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (172ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (219ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (282ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2046ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2047ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1108ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (579ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (487ms)
    √ bulk insert/select varbinary column batchSize 1 (765ms)
    √ bulk insert/select varbinary column batchSize 200 (204ms)
    √ bulk insert/select datetime column batchSize 1 (296ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (235ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (313ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (296ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2027ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1078ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (515ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (469ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (750ms)
    √ bulk insert/select varbinary column batchSize 200 (235ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (222ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (282ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2011ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2019ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (46ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1125ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (657ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (468ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (313ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (282ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (282ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (242ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (265ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (227ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (282ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (125ms)


  190 passing (32s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4020ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2054ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4017ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1078ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (484ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (750ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (313ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (171ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (579ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2043ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1062ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (625ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (468ms)
    √ employee insert/select with non primary key (469ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (188ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (313ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (172ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (282ms)
    √ bulk insert/select decimal column batchSize 200 (171ms)
    √ bulk insert/select/delete decimal column batchSize 200 (219ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (34s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2043ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1141ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (203ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (484ms)
    √ employee insert - update a single column (484ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (265ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (249ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (394ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2006ms)
    √ test timeout 10 secs on waitfor delay 2 (2010ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2021ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4047ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1125ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (579ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (265ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (265ms)
    √ bulk insert/select int column of unsigned batchSize 1 (275ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (765ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (319ms)
    √ bulk insert/select decimal column batchSize 200 (193ms)
    √ bulk insert/select/delete decimal column batchSize 200 (232ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (296ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2012ms)
    √ test timeout 0 secs on waitfor delay 4 (4017ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2001ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1141ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (78ms)
    √ bulk insert/select null column of datetime batchSize 1 (643ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (484ms)
    √ employee insert - update a single column (254ms)
    √ bulk insert/select varbinary column batchSize 1 (745ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (235ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (266ms)
    √ bulk insert/update/select decimal column batchSize 200 (218ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (172ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4014ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2046ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2018ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1110ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (484ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (282ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (266ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (265ms)
    √ bulk insert/select bit column batchSize 1 (313ms)
    √ bulk insert/select bit column 200 (219ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (766ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (579ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2050ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4018ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1094ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (641ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (234ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (312ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (282ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (172ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (438ms)
    √ bulk insert/update/select decimal column batchSize 200 (500ms)
    √ bulk insert/select varchar column batchSize 1 (562ms)
    √ bulk insert/select varchar column batchSize 200 (266ms)
    √ bulk insert/select/delete varchar column batchSize 200 (266ms)
    √ bulk insert/update/select varchar column batchSize 200 (312ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (328ms)
    √ bulk insert simple multi-column object in batches 200 (703ms)


  190 passing (34s)



  query
    √ query with errors (62ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly (78ms)
    √ test retrieving a string with null embedded (62ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  params
    √ insert large string into max column using user binding WLongVarChar (46ms)
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (94ms)
    √ invalid numbers cause errors (125ms)
    √ insert string as parameter (62ms)
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter (63ms)
    √ insert largest bigint as parameter (62ms)
    √ insert decimal as parameter (47ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter (47ms)
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field (62ms)
    √ insert min and max number values (78ms)
    √ insert large string into max column
    √ verify js date inserted into datetime field (46ms)
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time (47ms)
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters (47ms)
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2031ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2147ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output (62ms)

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4016ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (110ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1547ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (125ms)
    √ bulk insert/select null column of datetime batchSize 1 (203ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (141ms)
    √ employee complex json object array bulk operations (344ms)
    √ employee insert/select with non primary key (578ms)
    √ employee insert - update a single column (562ms)
    √ bulk insert/select varbinary column batchSize 1 (1000ms)
    √ bulk insert/select varbinary column batchSize 200 (250ms)
    √ bulk insert/select datetime column batchSize 1 (375ms)
    √ bulk insert/select datetime column batchSize 200 (234ms)
    √ bulk insert/select int column of signed batchSize 1 (344ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (375ms)
    √ bulk insert/select int column of unsigned batchSize 1 (469ms)
    √ bulk insert/select int column of unsigned batchSize 200 (391ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (390ms)
    √ bulk insert/select bit column batchSize 1 (547ms)
    √ bulk insert/select bit column 200 (391ms)
    √ bulk insert/update/select bit column 200 (437ms)
    √ bulk insert/select decimal column batchSize 1 (735ms)
    √ bulk insert/select decimal column batchSize 200 (406ms)
    √ bulk insert/select/delete decimal column batchSize 200 (750ms)
    √ bulk insert/update/select decimal column batchSize 200 (406ms)
    √ bulk insert/select varchar column batchSize 1 (516ms)
    √ bulk insert/select varchar column batchSize 200 (343ms)
    √ bulk insert/select/delete varchar column batchSize 200 (375ms)
    √ bulk insert/update/select varchar column batchSize 200 (375ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (547ms)
    √ bulk insert simple multi-column object in batches 200 (860ms)


  190 passing (39s)



  query
    √ query with errors (63ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2017ms)
    √ test timeout 10 secs on waitfor delay 2 (2009ms)
    √ test timeout 0 secs on waitfor delay 4 (4009ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2094ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2066ms)
    √ call proc that returns length of input string and decribes itself in results (196ms)
    √ call proc that returns length of input string (47ms)
    √ call proc that has 2 output string params + return code (62ms)
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2040ms)
    √ check for blocked calls to api with nested query (4047ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (62ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1843ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (766ms)
    √ bulk insert/select null column of datetime batchSize 1 (266ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (765ms)
    √ employee complex json object array bulk operations (360ms)
    √ employee insert/select with non primary key (484ms)
    √ employee insert - update a single column (343ms)
    √ bulk insert/select varbinary column batchSize 1 (469ms)
    √ bulk insert/select varbinary column batchSize 200 (297ms)
    √ bulk insert/select datetime column batchSize 1 (453ms)
    √ bulk insert/select datetime column batchSize 200 (297ms)
    √ bulk insert/select int column of signed batchSize 1 (422ms)
    √ bulk insert/select int column of signed batchSize 200 (281ms)
    √ bulk insert/update/select int column of signed batchSize 200 (344ms)
    √ bulk insert/select int column of unsigned batchSize 1 (422ms)
    √ bulk insert/select int column of unsigned batchSize 200 (281ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (988ms)
    √ bulk insert/select bit column batchSize 1 (454ms)
    √ bulk insert/select bit column 200 (281ms)
    √ bulk insert/update/select bit column 200 (359ms)
    √ bulk insert/select decimal column batchSize 1 (422ms)
    √ bulk insert/select decimal column batchSize 200 (281ms)
    √ bulk insert/select/delete decimal column batchSize 200 (453ms)
    √ bulk insert/update/select decimal column batchSize 200 (750ms)
    √ bulk insert/select varchar column batchSize 1 (813ms)
    √ bulk insert/select varchar column batchSize 200 (515ms)
    √ bulk insert/select/delete varchar column batchSize 200 (688ms)
    √ bulk insert/update/select varchar column batchSize 200 (469ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (593ms)
    √ bulk insert simple multi-column object in batches 200 (1017ms)


  190 passing (41s)



  query
    √ query with errors (109ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation (141ms)
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter (140ms)
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field (141ms)
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null) (47ms)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1) (78ms)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4094ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2142ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2109ms)
    √ call proc that returns length of input string and decribes itself in results (62ms)
    √ call proc that returns length of input string (141ms)
    √ call proc that has 2 output string params + return code (141ms)
    √ call proc that has 2 input params + 1 output (140ms)

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2047ms)
    √ check for blocked calls to api with nested query (4003ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception (109ms)
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (79ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (94ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (47ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (94ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (47ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary (47ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text (125ms)
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (78ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text (47ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (125ms)

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (234ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all (78ms)
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (79ms)
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (62ms)
    √ use prepared statement twice with different params. (62ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (3188ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (984ms)
    √ bulk insert/select null column of datetime batchSize 1 (1203ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (938ms)
    √ employee complex json object array bulk operations (953ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (515ms)
    √ bulk insert/select varbinary column batchSize 1 (860ms)
    √ bulk insert/select varbinary column batchSize 200 (498ms)
    √ bulk insert/select datetime column batchSize 1 (750ms)
    √ bulk insert/select datetime column batchSize 200 (422ms)
    √ bulk insert/select int column of signed batchSize 1 (734ms)
    √ bulk insert/select int column of signed batchSize 200 (688ms)
    √ bulk insert/update/select int column of signed batchSize 200 (625ms)
    √ bulk insert/select int column of unsigned batchSize 1 (687ms)
    √ bulk insert/select int column of unsigned batchSize 200 (438ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (500ms)
    √ bulk insert/select bit column batchSize 1 (672ms)
    √ bulk insert/select bit column 200 (500ms)
    √ bulk insert/update/select bit column 200 (797ms)
    √ bulk insert/select decimal column batchSize 1 (687ms)
    √ bulk insert/select decimal column batchSize 200 (453ms)
    √ bulk insert/select/delete decimal column batchSize 200 (484ms)
    √ bulk insert/update/select decimal column batchSize 200 (547ms)
    √ bulk insert/select varchar column batchSize 1 (734ms)
    √ bulk insert/select varchar column batchSize 200 (454ms)
    √ bulk insert/select/delete varchar column batchSize 200 (609ms)
    √ bulk insert/update/select varchar column batchSize 200 (516ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (687ms)
    √ bulk insert simple multi-column object in batches 200 (250ms)


  190 passing (49s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly (47ms)
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (141ms)

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter (110ms)
    √ insert a bool as a parameter (63ms)
    √ insert largest positive int as parameter (47ms)
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field (62ms)
    √ insert min and max number values (141ms)
    √ insert large string into max column (155ms)
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error (78ms)
    √ verify that non-Buffer object parameter returns an error (78ms)
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier (94ms)
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt (47ms)
    √ user bind SmallInt (94ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2031ms)
    √ test timeout 10 secs on waitfor delay 2 (2063ms)
    √ test timeout 0 secs on waitfor delay 4 (4031ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2062ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code (109ms)
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4062ms)
    √ open connections simultaneously and prove distinct connection objects created (79ms)
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (125ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (125ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (140ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (93ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (94ms)
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (125ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (47ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (94ms)

  date tests
    √ date retrieval verification (47ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (219ms)
    √ test timezone components of datetimeoffset (62ms)

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all (125ms)
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (78ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1562ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (656ms)
    √ bulk insert/select null column of datetime batchSize 1 (266ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (741ms)
    √ employee complex json object array bulk operations (311ms)
    √ employee insert/select with non primary key (621ms)
    √ employee insert - update a single column (297ms)
    √ bulk insert/select varbinary column batchSize 1 (980ms)
    √ bulk insert/select varbinary column batchSize 200 (276ms)
    √ bulk insert/select datetime column batchSize 1 (406ms)
    √ bulk insert/select datetime column batchSize 200 (265ms)
    √ bulk insert/select int column of signed batchSize 1 (407ms)
    √ bulk insert/select int column of signed batchSize 200 (281ms)
    √ bulk insert/update/select int column of signed batchSize 200 (312ms)
    √ bulk insert/select int column of unsigned batchSize 1 (422ms)
    √ bulk insert/select int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (328ms)
    √ bulk insert/select bit column batchSize 1 (1016ms)
    √ bulk insert/select bit column 200 (266ms)
    √ bulk insert/update/select bit column 200 (297ms)
    √ bulk insert/select decimal column batchSize 1 (422ms)
    √ bulk insert/select decimal column batchSize 200 (302ms)
    √ bulk insert/select/delete decimal column batchSize 200 (672ms)
    √ bulk insert/update/select decimal column batchSize 200 (312ms)
    √ bulk insert/select varchar column batchSize 1 (438ms)
    √ bulk insert/select varchar column batchSize 200 (250ms)
    √ bulk insert/select/delete varchar column batchSize 200 (328ms)
    √ bulk insert/update/select varchar column batchSize 200 (328ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (375ms)
    √ bulk insert simple multi-column object in batches 200 (688ms)


  190 passing (41s)



  query
    √ query with errors (63ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2031ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2005ms)
    √ check for blocked calls to api with nested query (4029ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (78ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (110ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (47ms)
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1563ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (671ms)
    √ bulk insert/select null column of datetime batchSize 1 (829ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (703ms)
    √ employee complex json object array bulk operations (672ms)
    √ employee insert/select with non primary key (391ms)
    √ employee insert - update a single column (328ms)
    √ bulk insert/select varbinary column batchSize 1 (422ms)
    √ bulk insert/select varbinary column batchSize 200 (281ms)
    √ bulk insert/select datetime column batchSize 1 (407ms)
    √ bulk insert/select datetime column batchSize 200 (265ms)
    √ bulk insert/select int column of signed batchSize 1 (391ms)
    √ bulk insert/select int column of signed batchSize 200 (250ms)
    √ bulk insert/update/select int column of signed batchSize 200 (312ms)
    √ bulk insert/select int column of unsigned batchSize 1 (406ms)
    √ bulk insert/select int column of unsigned batchSize 200 (266ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (875ms)
    √ bulk insert/select bit column batchSize 1 (406ms)
    √ bulk insert/select bit column 200 (250ms)
    √ bulk insert/update/select bit column 200 (328ms)
    √ bulk insert/select decimal column batchSize 1 (391ms)
    √ bulk insert/select decimal column batchSize 200 (250ms)
    √ bulk insert/select/delete decimal column batchSize 200 (329ms)
    √ bulk insert/update/select decimal column batchSize 200 (328ms)
    √ bulk insert/select varchar column batchSize 1 (422ms)
    √ bulk insert/select varchar column batchSize 200 (250ms)
    √ bulk insert/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert/update/select varchar column batchSize 200 (328ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (375ms)
    √ bulk insert simple multi-column object in batches 200 (719ms)


  190 passing (38s)



  query
    √ query with errors (63ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2046ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2002ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2003ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4027ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (109ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1564ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (672ms)
    √ bulk insert/select null column of datetime batchSize 1 (235ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (687ms)
    √ employee complex json object array bulk operations (328ms)
    √ employee insert/select with non primary key (610ms)
    √ employee insert - update a single column (593ms)
    √ bulk insert/select varbinary column batchSize 1 (985ms)
    √ bulk insert/select varbinary column batchSize 200 (297ms)
    √ bulk insert/select datetime column batchSize 1 (437ms)
    √ bulk insert/select datetime column batchSize 200 (250ms)
    √ bulk insert/select int column of signed batchSize 1 (406ms)
    √ bulk insert/select int column of signed batchSize 200 (266ms)
    √ bulk insert/update/select int column of signed batchSize 200 (313ms)
    √ bulk insert/select int column of unsigned batchSize 1 (421ms)
    √ bulk insert/select int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (313ms)
    √ bulk insert/select bit column batchSize 1 (375ms)
    √ bulk insert/select bit column 200 (281ms)
    √ bulk insert/update/select bit column 200 (312ms)
    √ bulk insert/select decimal column batchSize 1 (406ms)
    √ bulk insert/select decimal column batchSize 200 (266ms)
    √ bulk insert/select/delete decimal column batchSize 200 (313ms)
    √ bulk insert/update/select decimal column batchSize 200 (328ms)
    √ bulk insert/select varchar column batchSize 1 (390ms)
    √ bulk insert/select varchar column batchSize 200 (234ms)
    √ bulk insert/select/delete varchar column batchSize 200 (328ms)
    √ bulk insert/update/select varchar column batchSize 200 (297ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (375ms)
    √ bulk insert simple multi-column object in batches 200 (688ms)


  190 passing (37s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (47ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2018ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2001ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2001ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (125ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1547ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (656ms)
    √ bulk insert/select null column of datetime batchSize 1 (250ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (687ms)
    √ employee complex json object array bulk operations (313ms)
    √ employee insert/select with non primary key (609ms)
    √ employee insert - update a single column (313ms)
    √ bulk insert/select varbinary column batchSize 1 (969ms)
    √ bulk insert/select varbinary column batchSize 200 (281ms)
    √ bulk insert/select datetime column batchSize 1 (390ms)
    √ bulk insert/select datetime column batchSize 200 (234ms)
    √ bulk insert/select int column of signed batchSize 1 (407ms)
    √ bulk insert/select int column of signed batchSize 200 (265ms)
    √ bulk insert/update/select int column of signed batchSize 200 (297ms)
    √ bulk insert/select int column of unsigned batchSize 1 (406ms)
    √ bulk insert/select int column of unsigned batchSize 200 (274ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (919ms)
    √ bulk insert/select bit column batchSize 1 (359ms)
    √ bulk insert/select bit column 200 (266ms)
    √ bulk insert/update/select bit column 200 (328ms)
    √ bulk insert/select decimal column batchSize 1 (391ms)
    √ bulk insert/select decimal column batchSize 200 (266ms)
    √ bulk insert/select/delete decimal column batchSize 200 (312ms)
    √ bulk insert/update/select decimal column batchSize 200 (328ms)
    √ bulk insert/select varchar column batchSize 1 (406ms)
    √ bulk insert/select varchar column batchSize 200 (250ms)
    √ bulk insert/select/delete varchar column batchSize 200 (326ms)
    √ bulk insert/update/select varchar column batchSize 200 (359ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (360ms)
    √ bulk insert simple multi-column object in batches 200 (734ms)


  190 passing (37s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2011ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2006ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (109ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1579ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (656ms)
    √ bulk insert/select null column of datetime batchSize 1 (859ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (688ms)
    √ employee complex json object array bulk operations (594ms)
    √ employee insert/select with non primary key (310ms)
    √ employee insert - update a single column (297ms)
    √ bulk insert/select varbinary column batchSize 1 (453ms)
    √ bulk insert/select varbinary column batchSize 200 (266ms)
    √ bulk insert/select datetime column batchSize 1 (406ms)
    √ bulk insert/select datetime column batchSize 200 (313ms)
    √ bulk insert/select int column of signed batchSize 1 (406ms)
    √ bulk insert/select int column of signed batchSize 200 (281ms)
    √ bulk insert/update/select int column of signed batchSize 200 (313ms)
    √ bulk insert/select int column of unsigned batchSize 1 (390ms)
    √ bulk insert/select int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (313ms)
    √ bulk insert/select bit column batchSize 1 (375ms)
    √ bulk insert/select bit column 200 (265ms)
    √ bulk insert/update/select bit column 200 (329ms)
    √ bulk insert/select decimal column batchSize 1 (1000ms)
    √ bulk insert/select decimal column batchSize 200 (281ms)
    √ bulk insert/select/delete decimal column batchSize 200 (312ms)
    √ bulk insert/update/select decimal column batchSize 200 (344ms)
    √ bulk insert/select varchar column batchSize 1 (375ms)
    √ bulk insert/select varchar column batchSize 200 (266ms)
    √ bulk insert/select/delete varchar column batchSize 200 (328ms)
    √ bulk insert/update/select varchar column batchSize 200 (297ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (406ms)
    √ bulk insert simple multi-column object in batches 200 (688ms)


  190 passing (38s)



  query
    √ query with errors (93ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly (47ms)
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2016ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2004ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2008ms)
    √ check for blocked calls to api with nested query (4002ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (125ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (78ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1563ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (718ms)
    √ bulk insert/select null column of datetime batchSize 1 (266ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (735ms)
    √ employee complex json object array bulk operations (313ms)
    √ employee insert/select with non primary key (656ms)
    √ employee insert - update a single column (312ms)
    √ bulk insert/select varbinary column batchSize 1 (1032ms)
    √ bulk insert/select varbinary column batchSize 200 (297ms)
    √ bulk insert/select datetime column batchSize 1 (390ms)
    √ bulk insert/select datetime column batchSize 200 (297ms)
    √ bulk insert/select int column of signed batchSize 1 (406ms)
    √ bulk insert/select int column of signed batchSize 200 (266ms)
    √ bulk insert/update/select int column of signed batchSize 200 (297ms)
    √ bulk insert/select int column of unsigned batchSize 1 (391ms)
    √ bulk insert/select int column of unsigned batchSize 200 (266ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (313ms)
    √ bulk insert/select bit column batchSize 1 (406ms)
    √ bulk insert/select bit column 200 (266ms)
    √ bulk insert/update/select bit column 200 (328ms)
    √ bulk insert/select decimal column batchSize 1 (437ms)
    √ bulk insert/select decimal column batchSize 200 (266ms)
    √ bulk insert/select/delete decimal column batchSize 200 (328ms)
    √ bulk insert/update/select decimal column batchSize 200 (313ms)
    √ bulk insert/select varchar column batchSize 1 (422ms)
    √ bulk insert/select varchar column batchSize 200 (250ms)
    √ bulk insert/select/delete varchar column batchSize 200 (344ms)
    √ bulk insert/update/select varchar column batchSize 200 (312ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (406ms)
    √ bulk insert simple multi-column object in batches 200 (735ms)


  190 passing (38s)



  query
    √ query with errors (63ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2034ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2021ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4025ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1266ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (78ms)
    √ bulk insert/select null column of datetime batchSize 1 (687ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (500ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (281ms)
    √ bulk insert/select varbinary column batchSize 1 (797ms)
    √ bulk insert/select varbinary column batchSize 200 (235ms)
    √ bulk insert/select datetime column batchSize 1 (312ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (219ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (766ms)
    √ bulk insert/select bit column batchSize 1 (312ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (266ms)
    √ bulk insert/select decimal column batchSize 1 (313ms)
    √ bulk insert/select decimal column batchSize 200 (218ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (235ms)
    √ bulk insert/select/delete varchar column batchSize 200 (265ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2010ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2020ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2022ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4003ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (109ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1312ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (625ms)
    √ bulk insert/select null column of datetime batchSize 1 (204ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (609ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (531ms)
    √ employee insert - update a single column (547ms)
    √ bulk insert/select varbinary column batchSize 1 (875ms)
    √ bulk insert/select varbinary column batchSize 200 (234ms)
    √ bulk insert/select datetime column batchSize 1 (328ms)
    √ bulk insert/select datetime column batchSize 200 (235ms)
    √ bulk insert/select int column of signed batchSize 1 (312ms)
    √ bulk insert/select int column of signed batchSize 200 (204ms)
    √ bulk insert/update/select int column of signed batchSize 200 (265ms)
    √ bulk insert/select int column of unsigned batchSize 1 (313ms)
    √ bulk insert/select int column of unsigned batchSize 200 (218ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (266ms)
    √ bulk insert/select bit column batchSize 1 (844ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (265ms)
    √ bulk insert/select decimal column batchSize 1 (329ms)
    √ bulk insert/select decimal column batchSize 200 (250ms)
    √ bulk insert/select/delete decimal column batchSize 200 (265ms)
    √ bulk insert/update/select decimal column batchSize 200 (282ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (265ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (594ms)


  190 passing (35s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4000ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2016ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2009ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1219ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (563ms)
    √ bulk insert/select null column of datetime batchSize 1 (218ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (606ms)
    √ employee complex json object array bulk operations (276ms)
    √ employee insert/select with non primary key (251ms)
    √ employee insert - update a single column (281ms)
    √ bulk insert/select varbinary column batchSize 1 (375ms)
    √ bulk insert/select varbinary column batchSize 200 (250ms)
    √ bulk insert/select datetime column batchSize 1 (344ms)
    √ bulk insert/select datetime column batchSize 200 (250ms)
    √ bulk insert/select int column of signed batchSize 1 (312ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (313ms)
    √ bulk insert/select int column of unsigned batchSize 200 (219ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (749ms)
    √ bulk insert/select bit column batchSize 1 (329ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (328ms)
    √ bulk insert/select decimal column batchSize 200 (250ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (281ms)
    √ bulk insert/select varchar column batchSize 1 (344ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (266ms)
    √ bulk insert/update/select varchar column batchSize 200 (281ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (328ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2015ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2009ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (109ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1242ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (672ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (500ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (891ms)
    √ bulk insert/select varbinary column batchSize 200 (234ms)
    √ bulk insert/select datetime column batchSize 1 (360ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (313ms)
    √ bulk insert/select int column of signed batchSize 200 (234ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (219ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (268ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (265ms)
    √ bulk insert/select decimal column batchSize 1 (329ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (281ms)
    √ bulk insert/select varchar column batchSize 1 (344ms)
    √ bulk insert/select varchar column batchSize 200 (218ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2015ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2001ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2014ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1234ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (555ms)
    √ bulk insert/select null column of datetime batchSize 1 (188ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (496ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (812ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (328ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (313ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4010ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1257ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (546ms)
    √ bulk insert/select null column of datetime batchSize 1 (641ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (500ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (324ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (328ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (328ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (266ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (735ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (312ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (266ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (313ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4020ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1219ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (500ms)
    √ bulk insert/select varbinary column batchSize 1 (812ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (344ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (312ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (266ms)
    √ bulk insert/select int column of unsigned batchSize 1 (318ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (312ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (266ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (219ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (312ms)
    √ bulk insert/select varchar column batchSize 200 (219ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2015ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2007ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (110ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1219ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (546ms)
    √ bulk insert/select null column of datetime batchSize 1 (188ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (266ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (328ms)
    √ bulk insert/select varbinary column batchSize 200 (234ms)
    √ bulk insert/select datetime column batchSize 1 (313ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (312ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (766ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (265ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (366ms)
    √ bulk insert/select varchar column batchSize 200 (219ms)
    √ bulk insert/select/delete varchar column batchSize 200 (287ms)
    √ bulk insert/update/select varchar column batchSize 200 (251ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (292ms)
    √ bulk insert simple multi-column object in batches 200 (610ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error (47ms)
    √ verify Buffer objects as input parameters (62ms)
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2015ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2027ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1234ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (672ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (249ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (360ms)
    √ bulk insert/select varbinary column batchSize 200 (234ms)
    √ bulk insert/select datetime column batchSize 1 (312ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (328ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (282ms)
    √ bulk insert/select bit column batchSize 1 (781ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (328ms)
    √ bulk insert/select decimal column batchSize 200 (235ms)
    √ bulk insert/select/delete decimal column batchSize 200 (265ms)
    √ bulk insert/update/select decimal column batchSize 200 (266ms)
    √ bulk insert/select varchar column batchSize 1 (312ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (859ms)


  190 passing (35s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2062ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (46ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4016ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (47ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1082ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (536ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (268ms)
    √ bulk insert/select varbinary column batchSize 1 (753ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (282ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (265ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (235ms)
    √ bulk insert/select decimal column batchSize 1 (265ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (296ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4013ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2063ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1078ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (625ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (486ms)
    √ employee insert/select with non primary key (234ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (284ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (266ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (219ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2018ms)
    √ test timeout 10 secs on waitfor delay 2 (2018ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2046ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2028ms)
    √ check for blocked calls to api with nested query (4015ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (46ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1093ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (188ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (469ms)
    √ employee insert - update a single column (484ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (218ms)
    √ bulk insert/select datetime column batchSize 1 (313ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (282ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (235ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (282ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (571ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4017ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1093ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (469ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (188ms)
    √ bulk insert/select datetime column batchSize 1 (296ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (296ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (313ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (219ms)
    √ bulk insert/update/select decimal column batchSize 200 (255ms)
    √ bulk insert/select varchar column batchSize 1 (313ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (218ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2015ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4006ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2034ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1188ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (546ms)
    √ bulk insert/select null column of datetime batchSize 1 (641ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (468ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (193ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (172ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (219ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (109ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4007ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2046ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2001ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1188ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (255ms)
    √ bulk insert/select varbinary column batchSize 1 (750ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (235ms)
    √ bulk insert/select bit column batchSize 1 (312ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (313ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    1) user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2004ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4011ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4021ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1078ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (78ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (485ms)
    √ employee insert/select with non primary key (469ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (218ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (766ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (235ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (172ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (172ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  189 passing (34s)
  1 failing

  1) userbind user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error:
     Uncaught TypeError: Cannot read property 'message' of null
      at C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:275:26
      at C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:81:21
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:721:13
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:52:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:269:32
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:44:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:718:17
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:167:37
      at sequence (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:76:21)
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:713:13
      at iterate (C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:262:13)
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:274:29
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:44:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:718:17
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:167:37
      at Object.callback (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:70:29)
      at onQueryRaw (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\ConnectionWrapper.js:113:29)
      at Object.cbFreeStatement [as end] (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:211:9)
      at rowsCompleted (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:346:22)
      at queued_onNextResult (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:378:13)
      at Immediate._onImmediate (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:268:13)





  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2048ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4023ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1078ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (188ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (495ms)
    √ employee insert - update a single column (480ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (251ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (219ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (750ms)
    √ bulk insert/select decimal column batchSize 200 (204ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (282ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2018ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2008ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4029ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1079ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (313ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (266ms)
    √ bulk insert/select int column of unsigned batchSize 200 (171ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (752ms)
    √ bulk insert/select bit column batchSize 1 (313ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (329ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (249ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (265ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2020ms)
    √ check for blocked calls to api with nested query (4014ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (62ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1156ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (703ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (625ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (782ms)
    √ bulk insert/select varbinary column batchSize 200 (235ms)
    √ bulk insert/select datetime column batchSize 1 (329ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (344ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2020ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2032ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4008ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid  (40ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1172ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (171ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (282ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (236ms)
    √ bulk insert/select decimal column batchSize 1 (274ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2008ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2034ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2022ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4019ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1094ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (562ms)
    √ bulk insert/select null column of datetime batchSize 1 (657ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (625ms)
    √ employee complex json object array bulk operations (515ms)
    √ employee insert/select with non primary key (266ms)
    √ employee insert - update a single column (281ms)
    √ bulk insert/select varbinary column batchSize 1 (328ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (328ms)
    √ bulk insert/select datetime column batchSize 200 (234ms)
    √ bulk insert/select int column of signed batchSize 1 (328ms)
    √ bulk insert/select int column of signed batchSize 200 (235ms)
    √ bulk insert/update/select int column of signed batchSize 200 (281ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (704ms)
    √ bulk insert/select bit column batchSize 1 (343ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (329ms)
    √ bulk insert/select decimal column batchSize 200 (218ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (266ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (219ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (299ms)
    √ bulk insert simple multi-column object in batches 200 (593ms)


  190 passing (34s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2001ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2031ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4016ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (110ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1235ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (579ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (610ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (500ms)
    √ bulk insert/select varbinary column batchSize 1 (828ms)
    √ bulk insert/select varbinary column batchSize 200 (218ms)
    √ bulk insert/select datetime column batchSize 1 (313ms)
    √ bulk insert/select datetime column batchSize 200 (218ms)
    √ bulk insert/select int column of signed batchSize 1 (313ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (328ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (281ms)
    √ bulk insert/select bit column batchSize 1 (312ms)
    √ bulk insert/select bit column 200 (219ms)
    √ bulk insert/update/select bit column 200 (266ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (218ms)
    √ bulk insert/select/delete decimal column batchSize 200 (266ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1422ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (548ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (266ms)
    √ employee insert/select with non primary key (265ms)
    √ employee insert - update a single column (282ms)
    √ bulk insert/select varbinary column batchSize 1 (341ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (328ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (234ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (313ms)
    √ bulk insert/select int column of unsigned batchSize 200 (218ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (735ms)
    √ bulk insert/select bit column batchSize 1 (812ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (313ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2016ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1297ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (621ms)
    √ employee complex json object array bulk operations (472ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (347ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (312ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (312ms)
    √ bulk insert/select int column of signed batchSize 200 (219ms)
    √ bulk insert/update/select int column of signed batchSize 200 (297ms)
    √ bulk insert/select int column of unsigned batchSize 1 (328ms)
    √ bulk insert/select int column of unsigned batchSize 200 (219ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (265ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (219ms)
    √ bulk insert/update/select bit column 200 (266ms)
    √ bulk insert/select decimal column batchSize 1 (296ms)
    √ bulk insert/select decimal column batchSize 200 (235ms)
    √ bulk insert/select/delete decimal column batchSize 200 (265ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (321ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (125ms)


  190 passing (33s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2015ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4009ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2016ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (109ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (62ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1219ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (546ms)
    √ bulk insert/select null column of datetime batchSize 1 (219ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (844ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (328ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (312ms)
    √ bulk insert/select int column of signed batchSize 200 (219ms)
    √ bulk insert/update/select int column of signed batchSize 200 (282ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (225ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (313ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (265ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (312ms)
    √ bulk insert/select varchar column batchSize 200 (210ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4031ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2048ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4028ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1234ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (257ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (329ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (328ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (328ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (266ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (797ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (265ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (329ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (244ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4018ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (46ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1108ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (251ms)
    √ employee insert/select with non primary key (468ms)
    √ employee insert - update a single column (485ms)
    √ bulk insert/select varbinary column batchSize 1 (765ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (219ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (313ms)
    √ bulk insert/select bit column 200 (172ms)
    √ bulk insert/update/select bit column 200 (265ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (219ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2032ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2038ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2017ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (46ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1078ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (188ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (282ms)
    √ bulk insert/select int column of signed batchSize 200 (171ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (282ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (172ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (219ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    1) user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2078ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4021ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (46ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (312ms)
    √ bulk insert/select varbinary column batchSize 200 (204ms)
    √ bulk insert/select datetime column batchSize 1 (296ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (266ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (235ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (265ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (344ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (265ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (500ms)
    √ bulk insert simple multi-column object in batches 200 (125ms)


  189 passing (33s)
  1 failing

  1) userbind user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error:
     Uncaught TypeError: Cannot read property 'message' of null
      at C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:275:26
      at C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:81:21
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:721:13
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:52:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:269:32
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:44:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:718:17
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:167:37
      at sequence (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:76:21)
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:713:13
      at iterate (C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:262:13)
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:274:29
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:44:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:718:17
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:167:37
      at Object.callback (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:70:29)
      at onQueryRaw (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\ConnectionWrapper.js:113:29)
      at Object.cbFreeStatement [as end] (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:211:9)
      at rowsCompleted (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:346:22)
      at queued_onNextResult (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:378:13)
      at Immediate._onImmediate (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:268:13)





  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2031ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2003ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (46ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1062ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (828ms)
    √ bulk insert/select varbinary column batchSize 200 (266ms)
    √ bulk insert/select datetime column batchSize 1 (344ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (547ms)
    √ bulk insert/select int column of unsigned batchSize 1 (406ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (844ms)
    √ bulk insert/select bit column 200 (250ms)
    √ bulk insert/update/select bit column 200 (218ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (703ms)
    √ bulk insert/update/select varchar column batchSize 200 (687ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (376ms)
    √ bulk insert simple multi-column object in batches 200 (609ms)


  190 passing (35s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2026ms)
    √ call proc that returns length of input string and decribes itself in results (63ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (46ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1112ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (666ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (572ms)
    √ employee complex json object array bulk operations (484ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (765ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (266ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (703ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (266ms)
    √ bulk insert/select varchar column batchSize 1 (265ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2038ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2021ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2012ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4022ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1125ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (203ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (266ms)
    √ employee insert/select with non primary key (473ms)
    √ employee insert - update a single column (500ms)
    √ bulk insert/select varbinary column batchSize 1 (784ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (312ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (313ms)
    √ bulk insert/select int column of unsigned batchSize 200 (218ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (219ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (312ms)
    √ bulk insert/select varchar column batchSize 200 (172ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (218ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2015ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4014ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2062ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2021ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1094ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (562ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (312ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (313ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (265ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (593ms)


  190 passing (33s)



  query
    √ query with errors (62ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2046ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2063ms)
    √ check for blocked calls to api with nested query (4034ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset (47ms)

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1110ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (78ms)
    √ bulk insert/select null column of datetime batchSize 1 (640ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (500ms)
    √ employee insert/select with non primary key (469ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (251ms)
    √ bulk insert/select int column of unsigned batchSize 1 (296ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (266ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (218ms)
    √ bulk insert/update/select bit column 200 (235ms)
    √ bulk insert/select decimal column batchSize 1 (265ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (265ms)
    √ bulk insert simple multi-column object in batches 200 (579ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2057ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2032ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4024ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (141ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1099ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (562ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (266ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (188ms)
    √ bulk insert/select datetime column batchSize 1 (312ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (265ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (265ms)
    √ bulk insert/select bit column 200 (219ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (765ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (391ms)
    √ bulk insert/select varchar column batchSize 200 (172ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2011ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (568ms)
    √ employee complex json object array bulk operations (485ms)
    √ employee insert/select with non primary key (235ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (172ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (266ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (219ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (218ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (282ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (218ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (261ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (94ms)
    √ bulk insert/select null column of datetime batchSize 1 (203ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (94ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (515ms)
    √ employee insert - update a single column (500ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (787ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (225ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (219ms)
    √ bulk insert/select/delete decimal column batchSize 200 (225ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (266ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    1) user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2050ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (62ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (532ms)
    √ bulk insert/select null column of datetime batchSize 1 (203ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (266ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (322ms)
    √ bulk insert/select datetime column batchSize 200 (192ms)
    √ bulk insert/select int column of signed batchSize 1 (271ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (266ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (709ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (266ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (172ms)
    √ bulk insert/select/delete decimal column batchSize 200 (218ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (312ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (219ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  189 passing (33s)
  1 failing

  1) userbind user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error:
     Uncaught TypeError: Cannot read property 'message' of null
      at C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:275:26
      at C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:81:21
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:721:13
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:52:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:269:32
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:44:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:718:17
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:167:37
      at sequence (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:76:21)
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:713:13
      at iterate (C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:262:13)
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:274:29
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:44:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:718:17
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:167:37
      at Object.callback (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:70:29)
      at onQueryRaw (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\ConnectionWrapper.js:113:29)
      at Object.cbFreeStatement [as end] (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:211:9)
      at rowsCompleted (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:346:22)
      at queued_onNextResult (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:378:13)
      at Immediate._onImmediate (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:268:13)





  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2001ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1094ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (546ms)
    √ bulk insert/select null column of datetime batchSize 1 (657ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (265ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (313ms)
    √ bulk insert/select datetime column batchSize 200 (174ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (282ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (235ms)
    √ bulk insert/select bit column batchSize 1 (296ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (314ms)
    √ bulk insert/select decimal column batchSize 200 (218ms)
    √ bulk insert/select/delete decimal column batchSize 200 (219ms)
    √ bulk insert/update/select decimal column batchSize 200 (266ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (110ms)


  190 passing (32s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2063ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4005ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1188ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (501ms)
    √ employee insert - update a single column (246ms)
    √ bulk insert/select varbinary column batchSize 1 (797ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (266ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (218ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (312ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (218ms)
    √ bulk insert/update/select varchar column batchSize 200 (219ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1313ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (560ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (500ms)
    √ employee insert/select with non primary key (234ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (344ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (172ms)
    √ bulk insert/select int column of signed batchSize 1 (313ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (313ms)
    √ bulk insert/select int column of unsigned batchSize 1 (328ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (703ms)
    √ bulk insert/select bit column batchSize 1 (328ms)
    √ bulk insert/select bit column 200 (219ms)
    √ bulk insert/update/select bit column 200 (266ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (282ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (640ms)


  190 passing (34s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2054ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2021ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (87ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1172ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (573ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (641ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (500ms)
    √ bulk insert/select varbinary column batchSize 1 (797ms)
    √ bulk insert/select varbinary column batchSize 200 (235ms)
    √ bulk insert/select datetime column batchSize 1 (296ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (328ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (234ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (266ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (282ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (594ms)


  190 passing (34s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4031ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2062ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (62ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2003ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4022ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1344ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (672ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (593ms)
    √ employee complex json object array bulk operations (313ms)
    √ employee insert/select with non primary key (656ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (830ms)
    √ bulk insert/select varbinary column batchSize 200 (267ms)
    √ bulk insert/select datetime column batchSize 1 (390ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (312ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (907ms)
    √ bulk insert/select bit column batchSize 1 (359ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (235ms)
    √ bulk insert/select decimal column batchSize 1 (296ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (219ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (579ms)


  190 passing (35s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2009ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2020ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1141ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (579ms)
    √ employee complex json object array bulk operations (515ms)
    √ employee insert/select with non primary key (313ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (328ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (296ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (265ms)
    √ bulk insert/select int column of signed batchSize 200 (219ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (766ms)
    √ bulk insert/select bit column 200 (191ms)
    √ bulk insert/update/select bit column 200 (251ms)
    √ bulk insert/select decimal column batchSize 1 (765ms)
    √ bulk insert/select decimal column batchSize 200 (266ms)
    √ bulk insert/select/delete decimal column batchSize 200 (328ms)
    √ bulk insert/update/select decimal column batchSize 200 (328ms)
    √ bulk insert/select varchar column batchSize 1 (313ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (297ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (437ms)
    √ bulk insert simple multi-column object in batches 200 (657ms)


  190 passing (35s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error (47ms)
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results (62ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2031ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4022ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1203ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (563ms)
    √ bulk insert/select null column of datetime batchSize 1 (219ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (688ms)
    √ employee complex json object array bulk operations (263ms)
    √ employee insert/select with non primary key (495ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (796ms)
    √ bulk insert/select varbinary column batchSize 200 (235ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (219ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (313ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (266ms)
    √ bulk insert/select bit column batchSize 1 (265ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (313ms)
    √ bulk insert/select decimal column batchSize 200 (172ms)
    √ bulk insert/select/delete decimal column batchSize 200 (235ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (237ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2059ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2032ms)
    √ check for blocked calls to api with nested query (4027ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (46ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1110ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (78ms)
    √ bulk insert/select null column of datetime batchSize 1 (672ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (484ms)
    √ employee insert/select with non primary key (469ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (188ms)
    √ bulk insert/select datetime column batchSize 1 (312ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (313ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (266ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (734ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (328ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2063ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4022ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1103ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (563ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (312ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (500ms)
    √ bulk insert/select varbinary column batchSize 1 (782ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (375ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (218ms)
    √ bulk insert/update/select bit column 200 (235ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (219ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (562ms)


  190 passing (34s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4019ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1141ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (546ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (235ms)
    √ employee insert - update a single column (235ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (275ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (750ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (235ms)
    √ bulk insert/select decimal column batchSize 1 (296ms)
    √ bulk insert/select decimal column batchSize 200 (204ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (594ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4024ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2036ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1141ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (484ms)
    √ employee insert/select with non primary key (484ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (782ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (312ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (287ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (236ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (34s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2078ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2004ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (63ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1140ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (563ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (265ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (188ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (282ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2024ms)
    √ test timeout 10 secs on waitfor delay 2 (2031ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2063ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2017ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (46ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (750ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (328ms)
    √ bulk insert/select varbinary column batchSize 200 (188ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (219ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (172ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (172ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (781ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (265ms)
    √ bulk insert/select decimal column batchSize 200 (204ms)
    √ bulk insert/select/delete decimal column batchSize 200 (218ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (281ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (591ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2007ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4019ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (78ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (109ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (501ms)
    √ bulk insert/select varbinary column batchSize 1 (812ms)
    √ bulk insert/select varbinary column batchSize 200 (220ms)
    √ bulk insert/select datetime column batchSize 1 (280ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (235ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (298ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (32s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4007ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2062ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2000ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (553ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (267ms)
    √ bulk insert/select decimal column batchSize 1 (765ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (232ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (282ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2053ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2021ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4058ms)
    √ open connections simultaneously and prove distinct connection objects created (485ms)
    √ make sure two concurrent connections each have unique spid  (500ms)

  open
    √ connection closes OK in sequence with query (140ms)
    √ trusted connection to a server
    √ verify closed connection throws an exception (281ms)
    √ verify connection is not closed prematurely until a query is complete (188ms)
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests (1562ms)
    √ begin a transaction and rollback with no query (188ms)
    √ begin a transaction and rollback with no query and no callback (188ms)
    √ begin a transaction and commit (797ms)
    √ begin a transaction and rollback (656ms)
    √ begin a transaction and then query with an error (266ms)
    √ begin a transaction and commit (with no async support) (172ms)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (469ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (63ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (109ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (78ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1563ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (938ms)
    √ bulk insert/select null column of datetime batchSize 1 (828ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (563ms)
    √ employee insert/select with non primary key (265ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/select varbinary column batchSize 1 (312ms)
    √ bulk insert/select varbinary column batchSize 200 (188ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (453ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (313ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (312ms)
    √ bulk insert/select decimal column batchSize 1 (610ms)
    √ bulk insert/select decimal column batchSize 200 (250ms)
    √ bulk insert/select/delete decimal column batchSize 200 (312ms)
    √ bulk insert/update/select decimal column batchSize 200 (266ms)
    √ bulk insert/select varchar column batchSize 1 (328ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (109ms)


  190 passing (42s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4020ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2046ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (62ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4009ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1162ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (625ms)
    √ bulk insert/select null column of datetime batchSize 1 (171ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (579ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (282ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (204ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (296ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (344ms)
    √ bulk insert/select decimal column batchSize 1 (296ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (250ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (313ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2009ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4009ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1140ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (641ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (453ms)
    √ employee insert/select with non primary key (234ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (287ms)
    √ bulk insert/select datetime column batchSize 200 (204ms)
    √ bulk insert/select int column of signed batchSize 1 (265ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (703ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (265ms)
    √ bulk insert/select varchar column batchSize 1 (313ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    1) user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2002ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2006ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (62ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (79ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1094ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (484ms)
    √ employee insert - update a single column (485ms)
    √ bulk insert/select varbinary column batchSize 1 (765ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (328ms)
    √ bulk insert/select int column of unsigned batchSize 200 (199ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (256ms)
    √ bulk insert/select bit column batchSize 1 (282ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (282ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (218ms)
    √ bulk insert/update/select decimal column batchSize 200 (235ms)
    √ bulk insert/select varchar column batchSize 1 (305ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (563ms)


  189 passing (33s)
  1 failing

  1) userbind user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error:
     Uncaught TypeError: Cannot read property 'message' of null
      at C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:275:26
      at C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:81:21
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:721:13
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:52:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:269:32
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:44:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:718:17
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:167:37
      at sequence (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:76:21)
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:713:13
      at iterate (C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:262:13)
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:274:29
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:44:16
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:718:17
      at C:\Users\admin\dev\js\test\node_modules\async\lib\async.js:167:37
      at Object.callback (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\test\userbind.js:70:29)
      at onQueryRaw (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\ConnectionWrapper.js:113:29)
      at Object.cbFreeStatement [as end] (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:211:9)
      at rowsCompleted (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:346:22)
      at queued_onNextResult (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:378:13)
      at Immediate._onImmediate (C:\Users\admin\dev\js\test\node_modules\node-sqlserver-v8\lib\driverMgr.js:268:13)





  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2017ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4015ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1234ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (468ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (782ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (734ms)
    √ bulk insert/select bit column batchSize 1 (781ms)
    √ bulk insert/select bit column 200 (172ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (315ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (266ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2037ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4017ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1094ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (546ms)
    √ bulk insert/select null column of datetime batchSize 1 (657ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (484ms)
    √ employee insert/select with non primary key (235ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (312ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (218ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (171ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (251ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (235ms)
    √ bulk insert/select decimal column batchSize 1 (281ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (219ms)
    √ bulk insert/update/select decimal column batchSize 200 (266ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (234ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (282ms)
    √ bulk insert simple multi-column object in batches 200 (125ms)


  190 passing (32s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4009ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2018ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1110ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (219ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (563ms)
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (251ms)
    √ bulk insert/select varbinary column batchSize 1 (782ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (218ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (421ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (312ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (296ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2033ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2028ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2007ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2031ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (531ms)
    √ bulk insert/select null column of datetime batchSize 1 (657ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (484ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (266ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (719ms)
    √ bulk insert/select bit column batchSize 1 (267ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (276ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (172ms)
    √ bulk insert/select/delete varchar column batchSize 200 (219ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2073ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2002ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (484ms)
    √ employee insert - update a single column (484ms)
    √ bulk insert/select varbinary column batchSize 1 (782ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (172ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (750ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (219ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4011ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2062ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4022ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (110ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1172ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (234ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (219ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (703ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (234ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (594ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4014ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2046ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4032ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (63ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1125ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (78ms)
    √ bulk insert/select null column of datetime batchSize 1 (672ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (578ms)
    √ employee complex json object array bulk operations (469ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (171ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (234ms)
    √ bulk insert/select bit column batchSize 1 (266ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (282ms)
    √ bulk insert/select decimal column batchSize 200 (171ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (255ms)
    √ bulk insert/select varchar column batchSize 1 (287ms)
    √ bulk insert/select varchar column batchSize 200 (320ms)
    √ bulk insert/select/delete varchar column batchSize 200 (219ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (33s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2038ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2047ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1187ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (563ms)
    √ bulk insert/select null column of datetime batchSize 1 (187ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (611ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (282ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (312ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (766ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (219ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (219ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (219ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (299ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2012ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2063ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2009ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number (297ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (94ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (43ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1266ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (563ms)
    √ bulk insert/select null column of datetime batchSize 1 (671ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (579ms)
    √ employee complex json object array bulk operations (484ms)
    √ employee insert/select with non primary key (234ms)
    √ employee insert - update a single column (234ms)
    √ bulk insert/select varbinary column batchSize 1 (297ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (282ms)
    √ bulk insert/select int column of signed batchSize 200 (187ms)
    √ bulk insert/update/select int column of signed batchSize 200 (266ms)
    √ bulk insert/select int column of unsigned batchSize 1 (271ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (734ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (219ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (219ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (187ms)
    √ bulk insert/select/delete varchar column batchSize 200 (266ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (328ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2019ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2020ms)
    √ check for blocked calls to api with nested query (4015ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (109ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (2176ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (1225ms)
    √ bulk insert/select null column of datetime batchSize 1 (233ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (630ms)
    √ employee complex json object array bulk operations (258ms)
    √ employee insert/select with non primary key (728ms)
    √ employee insert - update a single column (821ms)
    √ bulk insert/select varbinary column batchSize 1 (1200ms)
    √ bulk insert/select varbinary column batchSize 200 (249ms)
    √ bulk insert/select datetime column batchSize 1 (310ms)
    √ bulk insert/select datetime column batchSize 200 (328ms)
    √ bulk insert/select int column of signed batchSize 1 (333ms)
    √ bulk insert/select int column of signed batchSize 200 (336ms)
    √ bulk insert/update/select int column of signed batchSize 200 (454ms)
    √ bulk insert/select int column of unsigned batchSize 1 (318ms)
    √ bulk insert/select int column of unsigned batchSize 200 (217ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (259ms)
    √ bulk insert/select bit column batchSize 1 (298ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (404ms)
    √ bulk insert/select decimal column batchSize 1 (477ms)
    √ bulk insert/select decimal column batchSize 200 (229ms)
    √ bulk insert/select/delete decimal column batchSize 200 (520ms)
    √ bulk insert/update/select decimal column batchSize 200 (341ms)
    √ bulk insert/select varchar column batchSize 1 (431ms)
    √ bulk insert/select varchar column batchSize 200 (459ms)
    √ bulk insert/select/delete varchar column batchSize 200 (360ms)
    √ bulk insert/update/select varchar column batchSize 200 (265ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (349ms)
    √ bulk insert simple multi-column object in batches 200 (581ms)


  190 passing (38s)



  query
    √ query with errors (62ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2017ms)
    √ test timeout 10 secs on waitfor delay 2 (2025ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2020ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2018ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2002ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2006ms)
    √ check for blocked calls to api with nested query (4009ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (58ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (52ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (54ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification (40ms)
    √ time to millisecond components (105ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (43ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1822ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (592ms)
    √ bulk insert/select null column of datetime batchSize 1 (316ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (716ms)
    √ employee complex json object array bulk operations (318ms)
    √ employee insert/select with non primary key (287ms)
    √ employee insert - update a single column (288ms)
    √ bulk insert/select varbinary column batchSize 1 (455ms)
    √ bulk insert/select varbinary column batchSize 200 (254ms)
    √ bulk insert/select datetime column batchSize 1 (376ms)
    √ bulk insert/select datetime column batchSize 200 (257ms)
    √ bulk insert/select int column of signed batchSize 1 (368ms)
    √ bulk insert/select int column of signed batchSize 200 (250ms)
    √ bulk insert/update/select int column of signed batchSize 200 (281ms)
    √ bulk insert/select int column of unsigned batchSize 1 (398ms)
    √ bulk insert/select int column of unsigned batchSize 200 (246ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (823ms)
    √ bulk insert/select bit column batchSize 1 (366ms)
    √ bulk insert/select bit column 200 (261ms)
    √ bulk insert/update/select bit column 200 (291ms)
    √ bulk insert/select decimal column batchSize 1 (376ms)
    √ bulk insert/select decimal column batchSize 200 (242ms)
    √ bulk insert/select/delete decimal column batchSize 200 (328ms)
    √ bulk insert/update/select decimal column batchSize 200 (292ms)
    √ bulk insert/select varchar column batchSize 1 (388ms)
    √ bulk insert/select varchar column batchSize 200 (281ms)
    √ bulk insert/select/delete varchar column batchSize 200 (291ms)
    √ bulk insert/update/select varchar column batchSize 200 (294ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (372ms)
    √ bulk insert simple multi-column object in batches 200 (628ms)


  190 passing (36s)



  query
    √ query with errors (52ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar (92ms)
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2027ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2011ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code (40ms)
    √ call proc that has 2 input params + 1 output (48ms)

  concurrent
    √ check for blocked calls to api with event emission (2003ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2018ms)
    √ check for blocked calls to api with nested query (4017ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (46ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (62ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (47ms)
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (63ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (234ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (109ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (62ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1219ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (562ms)
    √ bulk insert/select null column of datetime batchSize 1 (656ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (828ms)
    √ employee complex json object array bulk operations (641ms)
    √ employee insert/select with non primary key (250ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (413ms)
    √ bulk insert/select varbinary column batchSize 200 (233ms)
    √ bulk insert/select datetime column batchSize 1 (312ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (356ms)
    √ bulk insert/select int column of signed batchSize 200 (222ms)
    √ bulk insert/update/select int column of signed batchSize 200 (344ms)
    √ bulk insert/select int column of unsigned batchSize 1 (421ms)
    √ bulk insert/select int column of unsigned batchSize 200 (219ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (235ms)
    √ bulk insert/select bit column batchSize 1 (297ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (234ms)
    √ bulk insert/select decimal column batchSize 1 (327ms)
    √ bulk insert/select decimal column batchSize 200 (193ms)
    √ bulk insert/select/delete decimal column batchSize 200 (236ms)
    √ bulk insert/update/select decimal column batchSize 200 (287ms)
    √ bulk insert/select varchar column batchSize 1 (274ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (118ms)


  190 passing (35s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2015ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2079ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2000ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4028ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (88ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (60ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (62ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1281ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (625ms)
    √ bulk insert/select null column of datetime batchSize 1 (188ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (624ms)
    √ employee complex json object array bulk operations (266ms)
    √ employee insert/select with non primary key (578ms)
    √ employee insert - update a single column (344ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (297ms)
    √ bulk insert/select datetime column batchSize 200 (203ms)
    √ bulk insert/select int column of signed batchSize 1 (359ms)
    √ bulk insert/select int column of signed batchSize 200 (250ms)
    √ bulk insert/update/select int column of signed batchSize 200 (250ms)
    √ bulk insert/select int column of unsigned batchSize 1 (282ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (344ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (219ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (267ms)
    √ bulk insert/select varchar column batchSize 1 (281ms)
    √ bulk insert/select varchar column batchSize 200 (219ms)
    √ bulk insert/select/delete varchar column batchSize 200 (219ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2017ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4032ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2015ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4008ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (63ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (62ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (84ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (63ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1203ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (544ms)
    √ bulk insert/select null column of datetime batchSize 1 (688ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (625ms)
    √ employee complex json object array bulk operations (515ms)
    √ employee insert/select with non primary key (266ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (313ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (203ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (187ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (704ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (766ms)
    √ bulk insert/select decimal column batchSize 200 (187ms)
    √ bulk insert/select/delete decimal column batchSize 200 (219ms)
    √ bulk insert/update/select decimal column batchSize 200 (218ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (219ms)
    √ bulk insert/update/select varchar column batchSize 200 (266ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (296ms)
    √ bulk insert simple multi-column object in batches 200 (610ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2009ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2031ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2000ms)
    √ check for blocked calls to api with nested query (4022ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (172ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1113ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (562ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (585ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (516ms)
    √ bulk insert/select varbinary column batchSize 1 (812ms)
    √ bulk insert/select varbinary column batchSize 200 (187ms)
    √ bulk insert/select datetime column batchSize 1 (313ms)
    √ bulk insert/select datetime column batchSize 200 (187ms)
    √ bulk insert/select int column of signed batchSize 1 (297ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (234ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (203ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (250ms)
    √ bulk insert/select bit column batchSize 1 (797ms)
    √ bulk insert/select bit column 200 (188ms)
    √ bulk insert/update/select bit column 200 (218ms)
    √ bulk insert/select decimal column batchSize 1 (297ms)
    √ bulk insert/select decimal column batchSize 200 (172ms)
    √ bulk insert/select/delete decimal column batchSize 200 (266ms)
    √ bulk insert/update/select decimal column batchSize 200 (219ms)
    √ bulk insert/select varchar column batchSize 1 (312ms)
    √ bulk insert/select varchar column batchSize 200 (188ms)
    √ bulk insert/select/delete varchar column batchSize 200 (265ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (375ms)
    √ bulk insert simple multi-column object in batches 200 (641ms)


  190 passing (34s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2034ms)
    √ call proc that returns length of input string and decribes itself in results (46ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2001ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2016ms)
    √ check for blocked calls to api with nested query (4031ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (63ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1109ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (563ms)
    √ bulk insert/select null column of datetime batchSize 1 (156ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (562ms)
    √ employee complex json object array bulk operations (266ms)
    √ employee insert/select with non primary key (453ms)
    √ employee insert - update a single column (265ms)
    √ bulk insert/select varbinary column batchSize 1 (784ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (312ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (188ms)
    √ bulk insert/update/select int column of signed batchSize 200 (235ms)
    √ bulk insert/select int column of unsigned batchSize 1 (281ms)
    √ bulk insert/select int column of unsigned batchSize 200 (188ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (734ms)
    √ bulk insert/select bit column batchSize 1 (313ms)
    √ bulk insert/select bit column 200 (218ms)
    √ bulk insert/update/select bit column 200 (266ms)
    √ bulk insert/select decimal column batchSize 1 (312ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (234ms)
    √ bulk insert/update/select decimal column batchSize 200 (250ms)
    √ bulk insert/select varchar column batchSize 1 (282ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (234ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (281ms)
    √ bulk insert simple multi-column object in batches 200 (578ms)


  190 passing (34s)



  query
    √ query with errors (46ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2045ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2043ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2002ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2015ms)
    √ check for blocked calls to api with nested query (4063ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (63ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (93ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1203ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (563ms)
    √ bulk insert/select null column of datetime batchSize 1 (812ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (594ms)
    √ employee insert/select with non primary key (265ms)
    √ employee insert - update a single column (391ms)
    √ bulk insert/select varbinary column batchSize 1 (359ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (328ms)
    √ bulk insert/select datetime column batchSize 200 (250ms)
    √ bulk insert/select int column of signed batchSize 1 (328ms)
    √ bulk insert/select int column of signed batchSize 200 (219ms)
    √ bulk insert/update/select int column of signed batchSize 200 (656ms)
    √ bulk insert/select int column of unsigned batchSize 1 (344ms)
    √ bulk insert/select int column of unsigned batchSize 200 (219ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (282ms)
    √ bulk insert/select bit column batchSize 1 (321ms)
    √ bulk insert/select bit column 200 (203ms)
    √ bulk insert/update/select bit column 200 (312ms)
    √ bulk insert/select decimal column batchSize 1 (266ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (321ms)
    √ bulk insert/select varchar column batchSize 1 (360ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (265ms)
    √ bulk insert/update/select varchar column batchSize 200 (235ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (297ms)
    √ bulk insert simple multi-column object in batches 200 (109ms)


  190 passing (34s)



  query
    √ query with errors
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error (47ms)
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2014ms)
    √ test timeout 0 secs on waitfor delay 4 (4013ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2047ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2016ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2007ms)
    √ check for blocked calls to api with nested query (4022ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (63ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (47ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (78ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row.
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1125ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (547ms)
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (250ms)
    √ employee insert/select with non primary key (500ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (765ms)
    √ bulk insert/select varbinary column batchSize 200 (219ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (204ms)
    √ bulk insert/select int column of signed batchSize 1 (281ms)
    √ bulk insert/select int column of signed batchSize 200 (211ms)
    √ bulk insert/update/select int column of signed batchSize 200 (296ms)
    √ bulk insert/select int column of unsigned batchSize 1 (297ms)
    √ bulk insert/select int column of unsigned batchSize 200 (433ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (1024ms)
    √ bulk insert/select bit column batchSize 1 (783ms)
    √ bulk insert/select bit column 200 (286ms)
    √ bulk insert/update/select bit column 200 (299ms)
    √ bulk insert/select decimal column batchSize 1 (383ms)
    √ bulk insert/select decimal column batchSize 200 (215ms)
    √ bulk insert/select/delete decimal column batchSize 200 (303ms)
    √ bulk insert/update/select decimal column batchSize 200 (222ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (236ms)
    √ bulk insert/select/delete varchar column batchSize 200 (282ms)
    √ bulk insert/update/select varchar column batchSize 200 (270ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (328ms)
    √ bulk insert simple multi-column object in batches 200 (610ms)


  190 passing (35s)



  query
    √ query with errors (47ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2032ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2025ms)
    √ call proc that returns length of input string and decribes itself in results (47ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2004ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2010ms)
    √ check for blocked calls to api with nested query (4030ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (97ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1783ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (952ms)
    √ bulk insert/select null column of datetime batchSize 1 (659ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (650ms)
    √ employee complex json object array bulk operations (465ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (250ms)
    √ bulk insert/select varbinary column batchSize 1 (766ms)
    √ bulk insert/select varbinary column batchSize 200 (203ms)
    √ bulk insert/select datetime column batchSize 1 (281ms)
    √ bulk insert/select datetime column batchSize 200 (303ms)
    √ bulk insert/select int column of signed batchSize 1 (383ms)
    √ bulk insert/select int column of signed batchSize 200 (393ms)
    √ bulk insert/update/select int column of signed batchSize 200 (443ms)
    √ bulk insert/select int column of unsigned batchSize 1 (328ms)
    √ bulk insert/select int column of unsigned batchSize 200 (204ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (752ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (187ms)
    √ bulk insert/update/select bit column 200 (250ms)
    √ bulk insert/select decimal column batchSize 1 (282ms)
    √ bulk insert/select decimal column batchSize 200 (203ms)
    √ bulk insert/select/delete decimal column batchSize 200 (250ms)
    √ bulk insert/update/select decimal column batchSize 200 (265ms)
    √ bulk insert/select varchar column batchSize 1 (297ms)
    √ bulk insert/select varchar column batchSize 200 (203ms)
    √ bulk insert/select/delete varchar column batchSize 200 (235ms)
    √ bulk insert/update/select varchar column batchSize 200 (250ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (380ms)
    √ bulk insert simple multi-column object in batches 200 (653ms)


  190 passing (36s)



  query
    √ query with errors (66ms)
    √ simple query
    √ simple raw query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test login failure
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  params
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify buffer longer than column causes error
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  userbind
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4015ms)

  sproc
    √ call proc that waits for delay of input param - wait 5, timeout 2 - should error (2033ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results (90ms)
    √ call proc that returns length of input string
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output

  concurrent
    √ check for blocked calls to api with event emission (2013ms)
    √ open connections in sequence and prove distinct connection objects created
    √ check for blocked calls to api (2001ms)
    √ check for blocked calls to api with nested query (4042ms)
    √ open connections simultaneously and prove distinct connection objects created
    √ make sure two concurrent connections each have unique spid 

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (111ms)
    √ test timezone components of datetimeoffset

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 002 - batched query: SELECT....; PRINT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  prepared
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ use prepared statement twice with different params.
    √ stress test prepared statement with 500 invocations cycling through primary key (1266ms)

  bulk
    √ bulk insert/select null column of datetime batchSize 200 (771ms)
    √ bulk insert/select null column of datetime batchSize 1 (179ms)
    √ bulk insert simple multi-column object - default a nullable column 200 (594ms)
    √ employee complex json object array bulk operations (249ms)
    √ employee insert/select with non primary key (485ms)
    √ employee insert - update a single column (515ms)
    √ bulk insert/select varbinary column batchSize 1 (893ms)
    √ bulk insert/select varbinary column batchSize 200 (232ms)
    √ bulk insert/select datetime column batchSize 1 (470ms)
    √ bulk insert/select datetime column batchSize 200 (188ms)
    √ bulk insert/select int column of signed batchSize 1 (374ms)
    √ bulk insert/select int column of signed batchSize 200 (375ms)
    √ bulk insert/update/select int column of signed batchSize 200 (225ms)
    √ bulk insert/select int column of unsigned batchSize 1 (537ms)
    √ bulk insert/select int column of unsigned batchSize 200 (252ms)
    √ bulk insert/select/update int column of unsigned batchSize 200 (238ms)
    √ bulk insert/select bit column batchSize 1 (281ms)
    √ bulk insert/select bit column 200 (351ms)
    √ bulk insert/update/select bit column 200 (277ms)
    √ bulk insert/select decimal column batchSize 1 (265ms)
    √ bulk insert/select decimal column batchSize 200 (188ms)
    √ bulk insert/select/delete decimal column batchSize 200 (249ms)
    √ bulk insert/update/select decimal column batchSize 200 (273ms)
    √ bulk insert/select varchar column batchSize 1 (914ms)
    √ bulk insert/select varchar column batchSize 200 (218ms)
    √ bulk insert/select/delete varchar column batchSize 200 (225ms)
    √ bulk insert/update/select varchar column batchSize 200 (236ms)
    √ bulk insert/update/select/delete varchar column batchSize 200 (312ms)
    √ bulk insert simple multi-column object in batches 200 (564ms)


  190 passing (36s)

